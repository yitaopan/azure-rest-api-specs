// Generated by @typespec/http-server-csharp
// <auto-generated />
#nullable enable

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.App.DynamicSessions;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.AspNetCore.Http.Extensions;

namespace Microsoft.App.DynamicSessions.Controllers
{
    [ApiController]
    public partial class SessionResourceFilesController : ControllerBase
    {

        public SessionResourceFilesController(ISessionResourceFiles operations)
        {
            SessionResourceFilesImpl = operations;
        }
        internal virtual ISessionResourceFiles SessionResourceFilesImpl { get; }

        ///<summary>
        /// List the file resources.
        ///</summary>
        [HttpGet]
        [Route("/files")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(PagedSessionResourceFile))]
        public virtual async Task<IActionResult> List([FromQuery(Name = "api-version")] string apiVersion, [FromQuery(Name = "identifier")] string identifier, [FromQuery(Name = "path")] string? path)
        {
            var result = await SessionResourceFilesImpl.ListAsync(apiVersion, identifier, path);
            return Ok(result);
        }

        ///<summary>
        /// Get the file resource.
        ///</summary>
        [HttpGet]
        [Route("/files/{name}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SessionResourceFile))]
        public virtual async Task<IActionResult> GetName([FromQuery(Name = "api-version")] string apiVersion, string name, [FromQuery(Name = "identifier")] string identifier, [FromQuery(Name = "path")] string? path)
        {
            var result = await SessionResourceFilesImpl.GetNameAsync(apiVersion, name, identifier, path);
            return Ok(result);
        }

        ///<summary>
        /// Delete the file.
        ///</summary>
        [HttpDelete]
        [Route("/files/{name}")]
        [ProducesResponseType((int)HttpStatusCode.NoContent, Type = typeof(void))]
        public virtual async Task<IActionResult> Delete([FromQuery(Name = "api-version")] string apiVersion, string name, [FromQuery(Name = "identifier")] string identifier, [FromQuery(Name = "path")] string? path)
        {
            await SessionResourceFilesImpl.DeleteAsync(apiVersion, name, identifier, path);
            return NoContent();
        }

        ///<summary>
        /// Upload a file to a session.
        ///</summary>
        [HttpPost]
        [Route("/files")]
        [Consumes("multipart/form-data")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SessionResourceFile))]
        public virtual async Task<IActionResult> Upload([FromQuery(Name = "api-version")] string apiVersion, [FromQuery(Name = "identifier")] string identifier, [FromQuery(Name = "path")] string? path)
        {
            var boundary = Request.GetMultipartBoundary();
            if (boundary == null)
            {
                return BadRequest("Request missing multipart boundary");
            }


            var reader = new MultipartReader(boundary, Request.Body);
            var result = await SessionResourceFilesImpl.UploadAsync(apiVersion, identifier, reader, path);
            return Ok(result);
        }

        ///<summary>
        /// Get the content of the file.
        ///</summary>
        [HttpGet]
        [Route("/files/{name}/content")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(byte[]))]
        public virtual async Task<IActionResult> GetContent([FromQuery(Name = "api-version")] string apiVersion, string name, [FromQuery(Name = "identifier")] string identifier, [FromQuery(Name = "path")] string? path)
        {
            var result = await SessionResourceFilesImpl.GetContentAsync(apiVersion, name, identifier, path);
            return Ok(result);
        }

    }
}
