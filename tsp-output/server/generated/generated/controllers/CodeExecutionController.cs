// Generated by @typespec/http-server-csharp
// <auto-generated />
#nullable enable

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.App.DynamicSessions;

namespace Microsoft.App.DynamicSessions.Controllers
{
    [ApiController]
    public partial class CodeExecutionController : ControllerBase
    {

        public CodeExecutionController(ICodeExecution operations)
        {
            CodeExecutionImpl = operations;
        }
        internal virtual ICodeExecution CodeExecutionImpl { get; }

        ///<summary>
        /// Execute code in a session.
        ///</summary>
        [HttpPost]
        [Route("/executions")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SessionCodeExecutionResource))]
        public virtual async Task<IActionResult> Execute([FromQuery(Name = "api-version")] string apiVersion, [FromQuery(Name = "identifier")] string identifier, SessionCodeExecutionRequest body, [FromHeader(Name = "operation-id")] string? operationId)
        {
            var result = await CodeExecutionImpl.ExecuteAsync(apiVersion, identifier, body, operationId);
            return Ok(result);
        }

        ///<summary>
        /// Get the code execution result.
        ///</summary>
        [HttpGet]
        [Route("/executions/{executionId}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(SessionCodeExecutionResource))]
        public virtual async Task<IActionResult> GetName([FromQuery(Name = "api-version")] string apiVersion, string executionId, [FromQuery(Name = "identifier")] string identifier)
        {
            var result = await CodeExecutionImpl.GetNameAsync(apiVersion, executionId, identifier);
            return Ok(result);
        }

    }
}
